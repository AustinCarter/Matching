High Level: Build a React web app that retrieves matches for the current logged in member.

ex. A member joins as Brian, and requests a match, and that profile is displayed onto the screen.
	Brian can end call
	Brian can start the next match
	Brianâ€™s match should be able to log in, and see Brian on the screen.

	Bonus:
	More Efficient Matching:
		Match users based on tags / criteria
	Database 
	Other features you think of

---------------------------------------------------------------------------------------------

Login
	-Create Profile
		- Check if it exists
		- Register to Database
	- Check credintials
		- Username/email*
	- Check if someone is currently in call with you, otherwise show Request match
		- Might only do calls between connected people*

Edit Profile/Add data
	- Name*
	- Profile pic?
	- Matching Tags/prefs

Request match*

Matching
	- Query for users
	- Calculate fitness/good matches
		-Matching algorithim?
		- Cuold be interesting to do an anti-match every n matches
	- Filter based on score
		- Filter tolerence should grow as matches depleted
	- Display match from potential pool
		- Could show tags/criteria that was matched on (depending on opaqueness of matching alg)

Show user on screen
	- Access Camera and mic*
	- Process/encode audio and video data*
		- *******I predict this will be the largest pain point out of everything*********

Someone ends call
	- Other user should see the request match screen




Note: It is preferable in react/js treat objects as immutable (more efficient for determining what in the DOM needs to be rerendered.) i.e. need to be concncious of tendency to pass by ref

Note: js objects are mutable, meaning can just add arbitrary field to them ad hoc, this can act like a ud* in c-style programming. Ended up being useful from callback for peerconnection on track.
			Worth nothing that the callback for ontrack behaved as though it was in peerconnection, meaning accessing this.someField set the field on the peerConnection, not on the parent class, in this case StateManager. <-- last point important, was very counter intuitive

Note: Hello Austin, this is you from the past. if you are working on web programming, you better use typescript. Weak typing is the worst and will just result in headaches, don't be a fool a second time.
